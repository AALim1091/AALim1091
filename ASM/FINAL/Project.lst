Microsoft (R) Macro Assembler Version 14.00.23026.0	    04/24/18 23:29:34
main.asm						     Page 1 - 1


				;//Aaron Lim
				;//CSIS-118B-4179
				;//December 15, 2014
				;//FINAL

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				ExitProcess proto,dwExitCode:dword

				;//ProtoTypes
				arrayFill PROTO
				PrintArray PROTO aPtr:DWORD,cLength:DWORD,rLength:DWORD,aType:DWORD
				ProcessArray PROTO mPtr:DWORD,tPtr:DWORD,mSize:DWORD,aType:DWORD, tLength:DWORD, stopPtr:DWORD, tStopPtr:DWORD, mColPtr:DWORD
				PrintCoord PROTO mval:DWORD, loc:DWORD, aType:DWORD, mColPtr:DWORD

 00000000			.data 		;//write your data in this section

 00000000  00000100 [		mArray DWORD 256 DUP(?)																			;//main array
	    00000000
	   ]
 00000400  00000008 [		tArray DWORD 8 DUP(?)																			;//target array
	    00000000
	   ]

 00000420 00000010		mRow DWORD 16																					;//main row
 00000424 00000010		mCol DWORD 16																					;// main column

 00000428 00000001		tRow DWORD 1																					;//target row
 0000042C 00000008		tCol DWORD 8																					;//target column

 00000430 00000000		stop DWORD ?																					;//stop point for main array
 00000434 00000000		tStop DWORD ?																					;//stop point for target array

 00000438 000003E8		repVal DWORD 1000																				;//replacement value

				;//extra credit variable
 0000043C 00000000		numF DWORD 0																					;//3 of found elements

 00000440 4D 61 69 6E 20	mArr BYTE "Main Array ", 0dh,0ah,0																;//string BYTE
	   41 72 72 61 79
	   20 0D 0A 00
 0000044E 54 61 72 67 65	tArr BYTE "Target Array ",0dh,0ah,0																;//string BYTE
	   74 20 41 72 72
	   61 79 20 0D 0A
	   00
 0000045E 48 65 72 65 20	Found BYTE "Here are the found values and coordinates ", 0dh,0ah,0							    ;//string BYTE
	   61 72 65 20 74
	   68 65 20 66 6F
	   75 6E 64 20 76
	   61 6C 75 65 73
	   20 61 6E 64 20
	   63 6F 6F 72 64
	   69 6E 61 74 65
	   73 20 0D 0A 00
 0000048B 56 61 6C 75 65	Value BYTE "Value ",0																			;//string BYTE
	   20 00
 00000492 52 6F 77 20 00	Row BYTE "Row ",0																				;//string BYTE
 00000497 43 6F 6C 75 6D	Column BYTE "Column ",0dh,0ah,0																	;//string BYTE
	   6E 20 0D 0A 00
 000004A1 4D 61 69 6E 20	afSort BYTE "Main Array After Sort ", 0dh,0ah,0													;//string BYTE
	   41 72 72 61 79
	   20 41 66 74 65
	   72 20 53 6F 72
	   74 20 0D 0A 00
 000004BA 54 68 65 72 65	notFound BYTE "There were no matches between the two arrays ", 0dh,0ah,0						;//string BYTE
	   20 77 65 72 65
	   20 6E 6F 20 6D
	   61 74 63 68 65
	   73 20 62 65 74
	   77 65 65 6E 20
	   74 68 65 20 74
	   77 6F 20 61 72
	   72 61 79 73 20
	   0D 0A 00
 000004EA 54 68 65 20 6E	numCoord BYTE "The number of found coordinates are: ", 0dh,0ah,0                                ;//string BYTE
	   75 6D 62 65 72
	   20 6F 66 20 66
	   6F 75 6E 64 20
	   63 6F 6F 72 64
	   69 6E 61 74 65
	   73 20 61 72 65
	   3A 20 0D 0A 00

				;//formatting strings
 00000512 0D 0A 00		endl BYTE 0dh,0ah,0																				;//string BYTE
 00000515 09			tabr BYTE 9h																				    ;//tab string

 00000000			.code  		;//write your program here
 00000000			main proc
					
 00000000  BA 00000440 R		mov edx, OFFSET mArr																		;//mov offset of mArr to edx for output
 00000005  E8 00000000 E		call WriteString																			;//writestring to console
 0000000A  6A 04			PUSH TYPE mArray																			;//push to stack
 0000000C  68 00000000 R		PUSH OFFSET mArray																			;//push to stack
 00000011  68 00000100			PUSH LENGTHOF mArray																		;//push to stack
 00000016  E8 000000D3			call arrayFill																				;//call arrayFill procedure

 0000001B  A1 00000420 R		mov eax,mRow																				;//mov # of rows in main array to eax
 00000020  F7 25 00000424 R		mul mCol																					;//multiply by # of columns in main array
 00000026  A3 00000430 R		mov stop,eax																				;//move multiplication to stop val
					INVOKE PrintArray,																			;//Invoke procedure
					ADDR mArray,																				;//offset mArray
					mRow,																						;//num of rows
					mCol,																						;//num of cols
					TYPE mArray																					;//type of array
 0000002B  6A 04	   *	    push   +000000004h
 0000002D  FF 35 00000424 R *	    push   mCol
 00000033  FF 35 00000420 R *	    push   mRow
 00000039  68 00000000 R   *	    push   OFFSET mArray
 0000003E  E8 000000D0	   *	    call   PrintArray

 00000043  BA 0000044E R		mov edx, OFFSET tArr																		;//move string for output
 00000048  E8 00000000 E		call WriteString																			;//write to console
 0000004D  6A 04			PUSH TYPE tArray																			;//push to stack
 0000004F  68 00000400 R		PUSH OFFSET tArray																			;//push to stack
 00000054  6A 08			PUSH LENGTHOF tArray																		;//push to stack
 00000056  E8 00000093			call arrayFill																				;//call arrayFill

 0000005B  A1 0000042C R		mov eax,tCol																				;//mov target array column # to eax
 00000060  A3 00000434 R		mov tStop,eax																				;//move to tStop for stop point	
					INVOKE PrintArray,																			;//Invoke procedure
					ADDR tArray,																				;//offset tArray
					tRow,																						;//target # rows
					tCol,																						;//target # columns
					TYPE tArray																					;//type of target array
 00000065  6A 04	   *	    push   +000000004h
 00000067  FF 35 0000042C R *	    push   tCol
 0000006D  FF 35 00000428 R *	    push   tRow
 00000073  68 00000400 R   *	    push   OFFSET tArray
 00000078  E8 00000096	   *	    call   PrintArray

					INVOKE ProcessArray,																		;//Invoke procedure
					ADDR mArray,																				;//offset of main array
					ADDR tArray,																				;//offset of target array
					SIZEOF mArray,																				;//size of main array
					TYPE mArray,																				;//type of main array
					LENGTHOF tArray,																			;//lengthof target array
					stop,tStop,mCol																				;//stop point, target stop point, main array # of columns
 0000007D  FF 35 00000424 R *	    push   mCol
 00000083  FF 35 00000434 R *	    push   tStop
 00000089  FF 35 00000430 R *	    push   stop
 0000008F  6A 08	   *	    push   +000000008h
 00000091  6A 04	   *	    push   +000000004h
 00000093  68 00000400	   *	    push   +000000400h
 00000098  68 00000400 R   *	    push   OFFSET tArray
 0000009D  68 00000000 R   *	    push   OFFSET mArray
 000000A2  E8 000000AA	   *	    call   ProcessArray

 000000A7  BA 000004A1 R		mov edx, OFFSET afSort																		;//move string to edx
 000000AC  E8 00000000 E		call WriteString																			;//write to console	
	INVOKE PrintArray,																			;//Invoke procedure
					ADDR mArray,																				;//main array offset
					mRow,																						;//# or rows, main array
					mCol,																						;//# of columns, main array
					TYPE mArray																					;//type of main array
 000000B1  6A 04	   *	    push   +000000004h
 000000B3  FF 35 00000424 R *	    push   mCol
 000000B9  FF 35 00000420 R *	    push   mRow
 000000BF  68 00000000 R   *	    push   OFFSET mArray
 000000C4  E8 0000004A	   *	    call   PrintArray

 000000C9  BA 000004EA R		mov edx, OFFSET numCoord																	;//move string to edx
 000000CE  E8 00000000 E		call WriteString																			;//write string to console
 000000D3  A1 0000043C R		mov eax,numF																				;//mov number of coordinates found to eax for output
 000000D8  E8 00000000 E		call WriteInt																				;//write eax to console
 000000DD  E8 00000000 E		call crlf																					;//endl
 000000E2  E8 00000000 E		call crlf																					;//endl

					invoke ExitProcess,0 ;//exit program
 000000E7  6A 00	   *	    push   +000000000h
 000000E9  E8 00000000 E   *	    call   ExitProcess
 000000EE			main endp

				;//arrayFill Proc

 000000EE			arrayFill PROC
 000000EE  55			push ebp																						;//save ebp 
 000000EF  8B EC		mov ebp,esp																						;//copy esp to ebp
 000000F1  60			pushad																							;//save registers
 000000F2  8B 75 0C			mov esi, [ebp + 12]																			;//get offset
 000000F5  8B 4D 08			mov ecx, [ebp + 8]																			;//get lengthof

					;//produce random number
 000000F8  E8 00000000 E		call randomize																				;//randomize numbers for each time program is run
 000000FD			L1:	
 000000FD  B8 00000065			mov  eax,101																				;//range 0 to 100
 00000102  E8 00000000 E		call RandomRange																			;//set range																					
 00000107  89 06			mov[esi],eax																				;//move value to offset position of array
 00000109  03 75 10			add esi, [ebp + 16]																			;//increment esi by type
 0000010C  E2 EF		loop L1
					
 0000010E  61			popad																							;//restore registers
 0000010F  5D			pop ebp																							;//restore ebp
 00000110  C2 000C		ret 12																							;//clean up stack
 00000113			arrayFill endp

				;//PrintArray Proc

 00000113			PrintArray PROC aPtr:DWORD,cLength:DWORD,rLength:DWORD,aType:DWORD

 00000113  55		   *	    push   ebp
 00000114  8B EC	   *	    mov    ebp, esp
 00000116  8B 75 08			mov esi,aPtr																				;//move offset to esi
 00000119  8B 4D 0C			mov ecx,cLength																				;//move counter column length
 0000011C  B8 00000000		    mov eax,0																					;//set the sum to zero
 00000121			RRow:
 00000121  51				push ecx																					;//save count
 00000122  8B 4D 10			mov ecx,rLength																				;//move count row length
 00000125					Col:
 00000125  8B 06					mov eax,[esi]																		;//move first element to eax for output
 00000127  E8 00000000 E				call WriteInt																		;//write to console
 0000012C  03 75 14					add esi,aType																		;//increment by type
 0000012F  BA 00000515 R				mov edx, OFFSET tabr																;//allign output
 00000134  E8 00000000 E				call WriteString																	;//write to console
 00000139  E2 EA				loop Col																				;//loop columns
 0000013B  59				pop ecx																						;//restore row count
 0000013C  E8 00000000 E		call crlf																					;// space rows
 00000141  E2 DE		loop RRow																						;//loop rows
 00000143  E8 00000000 E		call crlf																					;//endl
 00000148  E8 00000000 E		call crlf																					;//endl
				ret
 0000014D  C9		   *	    leave  
 0000014E  C2 0010	   *	    ret    00010h
 00000151			PrintArray endp

				;//processArray Proc

 00000151			ProcessArray PROC mPtr:DWORD,tPtr:DWORD,mSize:DWORD,aType:DWORD,tLength:DWORD, stopPtr:DWORD, tStopPtr:DWORD, mColPtr:DWORD

 00000151  55		   *	    push   ebp
 00000152  8B EC	   *	    mov    ebp, esp
 00000154  C7 05 0000043C R	mov numF,0																						;//set numF to zero
	   00000000
 0000015E  60			pushad																							;//save registers

 0000015F  8B 4D 18		mov ecx,tLength																					;//pointer to target length
 00000162  8B 75 0C		mov esi,tPtr																					;//pointer to target array
 00000165  8B 7D 08		mov edi,mPtr																					;//pointer to main array
 00000168  BA 00000000		mov edx, 0																						;//set row index to zero

 0000016D  8B 45 1C		mov eax,stopPtr																					;//stop holds row * col
 00000170  F7 65 14		mul aType																						;// type = DWORD = 4
 00000173  89 45 10		mov mSize,eax																					;//size of array is determined by # of elements * 4

 00000176  8B 45 20		mov eax,tStopPtr																				;//tStop = colSize of target array
 00000179  F7 65 14		mul aType																						;//multiply tStop by DWORD
 0000017C  89 45 20		mov tStopPtr,eax																				;//move tStop * aType into tStop, tStop = colSize * 4
 0000017F  01 75 20		add tStopPtr,esi																				;//add to address of esi for stop point

 00000182  A1 00000438 R	mov eax,repVal																					;//move 1000 into eax

 00000187				L1:	
 00000187  8B 1E				mov ebx, [esi]																			;//mov first element in tArray to ebx
 00000189						L2:
 00000189  39 1C 3A						cmp [edi + edx],ebx																;//compare 1st element tArray to fist row,first col mArray 
 0000018C  75 17						jne skip																		;//skip element if not equal
 0000018E  83 05 0000043C R						add numF,1																	;//add 1 to the number of elements found
	   01
									Invoke PrintCoord, ebx, edx, aType, mColPtr									;//invoke preocedure
 00000195  FF 75 24	   *	    push   dword  ptr ss:[ebp]+000000024h
 00000198  FF 75 14	   *	    push   dword  ptr ss:[ebp]+000000014h
 0000019B  52		   *	    push   edx
 0000019C  53		   *	    push   ebx
 0000019D  E8 0000004A	   *	    call   PrintCoord
 000001A2  89 04 3A							mov [edi + edx], eax														;//mov 1000 into destination of element
 000001A5							skip:
 000001A5  03 55 14						add edx, aType																	;//increment to next val in row
 000001A8  3B 55 10						cmp edx, mSize																	;//compare row val to size of mArray
 000001AB  72 DC						jb L2

 000001AD  03 75 14				add esi,aType																			;//inc esi by DWORD
 000001B0  BA 00000000				mov edx, 0																				;//reset edx
						;//cmp esi,4215816 
 000001B5  3B 75 20				cmp esi, tStopPtr																		;//stop loop if esi address equals address at end of target array
 000001B8  73 02				jae next																				;//jump if above or equal
 000001BA  E2 CB				Loop L1

 000001BC			next:
 000001BC  61				popad																						;//restore registers
 000001BD  83 3D 0000043C R		cmp numF,0																					;//compare numbers found to 0
	   00
 000001C4  74 02			je noFind																					;// if zero, jump to noFind label
 000001C6  EB 16			jmp Done																					;//else jump done

 000001C8			noFind:
 000001C8  BA 000004BA R		mov edx, OFFSET notFound																	;//set "no find" string to edx for output
 000001CD  E8 00000000 E		call WriteString																			;//write to console
 000001D2  E8 00000000 E		call crlf																					;//endl
					exit																						;//exit program
 000001D7  6A 00	   *	    push   +000000000h
 000001D9  E8 00000000 E   *	    call   ExitProcess

 000001DE			Done:
 000001DE  E8 00000000 E		call crlf																					;//endl
 000001E3  E8 00000000 E		call crlf																					;//endl

				ret
 000001E8  C9		   *	    leave  
 000001E9  C2 0020	   *	    ret    00020h
 000001EC			ProcessArray endp

				;//PrintCoord Proc

 000001EC			PrintCoord PROC, mval:DWORD, loc:DWORD, aType:DWORD, mColPtr:DWORD

 000001EC  55		   *	    push   ebp
 000001ED  8B EC	   *	    mov    ebp, esp
 000001EF  60			pushad																							;//save registers
 000001F0  83 3D 0000043C R		cmp numF,1																					;//compare numbers found to 1
	   01
 000001F7  77 3C			ja skipS																					;// if more than one number is found jump to skip string label

 000001F9  BA 0000045E R		mov edx, OFFSET Found																		;//move found string to edx
 000001FE  E8 00000000 E		call WriteString																			;//write to console
 00000203  BA 0000048B R		mov edx, OFFSET Value																		;//value string
 00000208  E8 00000000 E		call WriteString																			;//write to console
 0000020D  BA 00000515 R		mov edx, offset tabr																		;//tab string
 00000212  E8 00000000 E		call WriteString																			;//write to console
 00000217  BA 00000492 R		mov edx, OFFSET Row																			;// row string
 0000021C  E8 00000000 E		call WriteString																			;//write to console
 00000221  BA 00000515 R		mov edx, offset tabr																		;//tab string
 00000226  E8 00000000 E		call WriteString																			;//write to console
 0000022B  BA 00000497 R		mov edx, OFFSET Column																		;// column string
 00000230  E8 00000000 E		call WriteString																			;//write to console

 00000235			skipS:
					;//find row(x) coordinates
 00000235  8B 45 0C			mov eax,loc																					;//mov loc value to eax
 00000238  2B D2			sub edx,edx																					;//zero edx register (remainder)
 0000023A  F7 75 10			div aType																					;//divide by type DWORD
 0000023D  F7 75 14			div mColPtr																					;//divide by number of elements in row (column number)
 00000240  8B D8			mov ebx,eax																					;// copy eax to ebx for future use

					;//find column(y) coordinates
 00000242  8B 45 0C			mov eax,loc																					;//move found location to eax
 00000245  2B D2			sub edx,edx																					;//zero edx register (remainder)
 00000247  F7 75 10			div aType																					;//divide by type DWORD
 0000024A  40				inc eax																						;//increment by 1
 0000024B  3B 45 14			cmp eax,mColPtr																				;// compare eax to main array column number
 0000024E  76 08			jbe next																					;//jump if below or equal to next

 00000250			swap:
 00000250  2B 45 14			sub eax,mColPtr																				;//subtract column number from eax
 00000253  3B 45 14			cmp eax,mColPtr																				;// comapare eax to column number
 00000256  77 F8			ja swap																						;//jump if above back to swap
					
 00000258			next:
 00000258  48				dec eax																						;//decrement value of eax to equal column index
 00000259  89 45 0C			mov loc,eax																					;// mov to loc variable

					;//Print val,x-coord, y-coord
 0000025C  8B 45 08			mov eax, mval																				;//value
 0000025F  E8 00000000 E		call WriteInt
 00000264  BA 00000515 R		mov edx, offset tabr
 00000269  E8 00000000 E		call WriteString
 0000026E  8B C3			mov eax, ebx																				;//x-coordinates
 00000270  E8 00000000 E		call WriteInt
 00000275  BA 00000515 R		mov edx, offset tabr
 0000027A  E8 00000000 E		call WriteString
 0000027F  8B 45 0C			mov eax, loc																				;// y- coordinates
 00000282  E8 00000000 E		call WriteInt
 00000287  E8 00000000 E		call crlf

 0000028C  61			popad																							;//restore registers
				ret
 0000028D  C9		   *	    leave  
 0000028E  C2 0010	   *	    ret    00010h
 00000291			PrintCoord endp
				end main ;//end main


Microsoft (R) Macro Assembler Version 14.00.23026.0	    04/24/18 23:29:34
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000516 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000291 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintArray . . . . . . . . . . .	P Near	 00000113 _TEXT	Length= 0000003E Public STDCALL
  aPtr . . . . . . . . . . . . .	DWord	 bp + 00000008
  cLength  . . . . . . . . . . .	DWord	 bp + 0000000C
  rLength  . . . . . . . . . . .	DWord	 bp + 00000010
  aType  . . . . . . . . . . . .	DWord	 bp + 00000014
  RRow . . . . . . . . . . . . .	L Near	 00000121 _TEXT	
  Col  . . . . . . . . . . . . .	L Near	 00000125 _TEXT	
PrintCoord . . . . . . . . . . .	P Near	 000001EC _TEXT	Length= 000000A5 Public STDCALL
  mval . . . . . . . . . . . . .	DWord	 bp + 00000008
  loc  . . . . . . . . . . . . .	DWord	 bp + 0000000C
  aType  . . . . . . . . . . . .	DWord	 bp + 00000010
  mColPtr  . . . . . . . . . . .	DWord	 bp + 00000014
  skipS  . . . . . . . . . . . .	L Near	 00000235 _TEXT	
  swap . . . . . . . . . . . . .	L Near	 00000250 _TEXT	
  next . . . . . . . . . . . . .	L Near	 00000258 _TEXT	
ProcessArray . . . . . . . . . .	P Near	 00000151 _TEXT	Length= 0000009B Public STDCALL
  mPtr . . . . . . . . . . . . .	DWord	 bp + 00000008
  tPtr . . . . . . . . . . . . .	DWord	 bp + 0000000C
  mSize  . . . . . . . . . . . .	DWord	 bp + 00000010
  aType  . . . . . . . . . . . .	DWord	 bp + 00000014
  tLength  . . . . . . . . . . .	DWord	 bp + 00000018
  stopPtr  . . . . . . . . . . .	DWord	 bp + 0000001C
  tStopPtr . . . . . . . . . . .	DWord	 bp + 00000020
  mColPtr  . . . . . . . . . . .	DWord	 bp + 00000024
  L1 . . . . . . . . . . . . . .	L Near	 00000187 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000189 _TEXT	
  skip . . . . . . . . . . . . .	L Near	 000001A5 _TEXT	
  next . . . . . . . . . . . . .	L Near	 000001BC _TEXT	
  noFind . . . . . . . . . . . .	L Near	 000001C8 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 000001DE _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
arrayFill  . . . . . . . . . . .	P Near	 000000EE _TEXT	Length= 00000025 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000FD _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000EE Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
Column . . . . . . . . . . . . .	Byte	 00000497 _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
Found  . . . . . . . . . . . . .	Byte	 0000045E _DATA	
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
Row  . . . . . . . . . . . . . .	Byte	 00000492 _DATA	
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
Value  . . . . . . . . . . . . .	Byte	 0000048B _DATA	
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
afSort . . . . . . . . . . . . .	Byte	 000004A1 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
endl . . . . . . . . . . . . . .	Byte	 00000512 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
mArray . . . . . . . . . . . . .	DWord	 00000000 _DATA	
mArr . . . . . . . . . . . . . .	Byte	 00000440 _DATA	
mCol . . . . . . . . . . . . . .	DWord	 00000424 _DATA	
mRow . . . . . . . . . . . . . .	DWord	 00000420 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
notFound . . . . . . . . . . . .	Byte	 000004BA _DATA	
numCoord . . . . . . . . . . . .	Byte	 000004EA _DATA	
numF . . . . . . . . . . . . . .	DWord	 0000043C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
repVal . . . . . . . . . . . . .	DWord	 00000438 _DATA	
stop . . . . . . . . . . . . . .	DWord	 00000430 _DATA	
tArray . . . . . . . . . . . . .	DWord	 00000400 _DATA	
tArr . . . . . . . . . . . . . .	Byte	 0000044E _DATA	
tCol . . . . . . . . . . . . . .	DWord	 0000042C _DATA	
tRow . . . . . . . . . . . . . .	DWord	 00000428 _DATA	
tStop  . . . . . . . . . . . . .	DWord	 00000434 _DATA	
tabr . . . . . . . . . . . . . .	Byte	 00000515 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
