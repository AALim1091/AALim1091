Microsoft (R) Macro Assembler Version 11.00.61030.0	    12/05/14 19:22:43
main.asm						     Page 1 - 1


				;//Aaron Lim
				;//CSIS-118B-4179
				;//November 16, 2014
				;//lab_12
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;//.386
				;//.model flat,stdcall
				;//.stack 4096

				FillArray PROTO, aPtr: PTR DWORD, aCount:DWORD, aType:Dword
				PrintArray PROTO, aPtr: PTR DWORD, aCount:DWORD, aType:Dword
				CalcArray PROTO, aCount:DWORD, aSize: DWORD, aType:Dword,aPtr: PTR DWORD
				ShowParams PROTO, numParam:DWORD
				ExitProcess proto,dwExitCode:dword

 00000000			.data 		;//write your data in this section

 00000000  0000000A [		intArray DWORD 10 dup(?)
	    00000000
	   ]

 00000028 45 6E 74 65 72		msg1 BYTE "Enter 10 numbers ", 0dh,0ah,0
	   20 31 30 20 6E
	   75 6D 62 65 72
	   73 20 0D 0A 00
 0000003C 53 74 61 63 6B		msg2 BYTE "Stack after inputArray and ShowParams calls  ", 0dh,0ah,0
	   20 61 66 74 65
	   72 20 69 6E 70
	   75 74 41 72 72
	   61 79 20 61 6E
	   64 20 53 68 6F
	   77 50 61 72 61
	   6D 73 20 63 61
	   6C 6C 73 20 20
	   0D 0A 00
 0000006C 53 74 61 63 6B		msg3 BYTE "Stack after CalculateElements and ShowParams calls  ", 0dh,0ah,0
	   20 61 66 74 65
	   72 20 43 61 6C
	   63 75 6C 61 74
	   65 45 6C 65 6D
	   65 6E 74 73 20
	   61 6E 64 20 53
	   68 6F 77 50 61
	   72 61 6D 73 20
	   63 61 6C 6C 73
	   20 20 0D 0A 00
 000000A3 53 74 61 63 6B		msg4 BYTE "Stack after PrintArray and ShowParams calls  ", 0dh,0ah,0
	   20 61 66 74 65
	   72 20 50 72 69
	   6E 74 41 72 72
	   61 79 20 61 6E
	   64 20 53 68 6F
	   77 50 61 72 61
	   6D 73 20 63 61
	   6C 6C 73 20 20
	   0D 0A 00
 000000D3 43 61 6C 63 75		Calc BYTE "Calculated Array  ", 0dh,0ah,0
	   6C 61 74 65 64
	   20 41 72 72 61
	   79 20 20 0D 0A
	   00

 000000E8 53 74 61 63 6B		Stk BYTE "Stack Parameters: ", 0dh,0ah,0
	   20 50 61 72 61
	   6D 65 74 65 72
	   73 3A 20 0D 0A
	   00
 000000FD 2D 2D 2D 2D 2D		dash BYTE "----------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 00
 0000011A 41 64 64 72 65		msg5 BYTE "Address: ",0
	   73 73 3A 20 00
 00000124 20 3D 20 00			msg6 BYTE " = ",0
 00000128 2C 20 00			msg7 BYTE ", ",0														;//holds the seventh string message
 0000012B 0D 0A 00			endl BYTE 0dh,0ah,0,



 00000000			.code  		;//write your program here
 00000000			main proc

					

 00000000  BA 00000028 R		mov edx,offset msg1                                ;//moves into edx register the endl message string
 00000005  E8 00000000 E	    call WriteString                                ;//moves the message to the console
 0000000A  BA 0000012B R	    mov edx,offset endl                                ;//moves into edx register the endl message string
 0000000F  E8 00000000 E	    call WriteString                                ;//moves the message to the console
					;//mov esi, OFFSET intArray
					;//mov ecx,LENGTHOF intArray

					;//procedures
 00000014  BA 0000012B R		mov edx,offset endl								;//moves into edx register the endl message string
 00000019  E8 00000000 E		call WriteString								;//moves the message to the console
 0000001E  BA 0000003C R		mov edx,offset msg2								;//moves into edx register the endl message string
 00000023  E8 00000000 E		call WriteString								;//moves the message to the console								
 00000028  BA 000000E8 R		mov edx,offset stk								;//moves into edx register the endl message string
 0000002D  E8 00000000 E		call WriteString								;//moves the message to the console
 00000032  BA 000000FD R		mov edx,offset dash								;//moves into edx register the endl message string
 00000037  E8 00000000 E		call WriteString								;//moves the message to the console

					
					INVOKE FillArray,
					OFFSET intArray,
					LENGTHOF intArray,
					TYPE intArray
 0000003C  6A 04	   *	    push   +000000004h
 0000003E  6A 0A	   *	    push   +00000000Ah
 00000040  68 00000000 R   *	    push   dword  ptr OFFSET FLAT: intArray
 00000045  E8 00000089	   *	    call   FillArray
					
					


 0000004A  BA 0000012B R		mov edx,offset endl								;//moves into edx register the endl message string
 0000004F  E8 00000000 E		call WriteString								;//moves the message to the console
 00000054  BA 0000006C R		mov edx,offset msg3								;//moves into edx register the endl message string
 00000059  E8 00000000 E		call WriteString								;//moves the message to the console								
 0000005E  BA 000000E8 R		mov edx,offset stk								;//moves into edx register the endl message string
 00000063  E8 00000000 E		call WriteString								;//moves the message to the console
 00000068  BA 000000FD R		mov edx,offset dash								;//moves into edx register the endl message string
 0000006D  E8 00000000 E		call WriteString								;//moves the message to the console

					INVOKE CalcArray,
					LENGTHOF intArray,
					SIZEOF intArray,
					TYPE intArray,
					OFFSET intArray
 00000072  68 00000000 R   *	    push   dword  ptr OFFSET FLAT: intArray
 00000077  6A 04	   *	    push   +000000004h
 00000079  6A 28	   *	    push   +000000028h
 0000007B  6A 0A	   *	    push   +00000000Ah
 0000007D  E8 00000071	   *	    call   CalcArray

 00000082  BA 0000012B R		mov edx,offset endl								;//moves into edx register the endl message string
 00000087  E8 00000000 E		call WriteString								;//moves the message to the console
 0000008C  BA 000000D3 R		mov edx,offset Calc                                ;//moves into edx register the endl message string
 00000091  E8 00000000 E	    call WriteString                                ;//moves the message to the console
				 
 00000096  BA 0000012B R		mov edx,offset endl								;//moves into edx register the endl message string
 0000009B  E8 00000000 E		call WriteString								;//moves the message to the console
 000000A0  BA 000000A3 R		mov edx,offset msg4								;//moves into edx register the endl message string
 000000A5  E8 00000000 E		call WriteString								;//moves the message to the console								
 000000AA  BA 000000E8 R		mov edx,offset stk								;//moves into edx register the endl message string
 000000AF  E8 00000000 E		call WriteString								;//moves the message to the console
 000000B4  BA 000000FD R		mov edx,offset dash								;//moves into edx register the endl message string
 000000B9  E8 00000000 E		call WriteString								;//moves the message to the console

					INVOKE PrintArray,
					OFFSET intArray,
					LENGTHOF intArray,
					TYPE intArray
 000000BE  6A 04	   *	    push   +000000004h
 000000C0  6A 0A	   *	    push   +00000000Ah
 000000C2  68 00000000 R   *	    push   dword  ptr OFFSET FLAT: intArray
 000000C7  E8 0000005F	   *	    call   PrintArray

					

					invoke ExitProcess,0
 000000CC  6A 00	   *	    push   +000000000h
 000000CE  E8 00000000 E   *	    call   ExitProcess
 000000D3			main endp

				;//Fill array proc from previous lab
 000000D3			FillArray PROC, aPtr: PTR DWORD, aCount:DWORD, aType:Dword                                                              ;//begin the PrintArray Procedure


 000000D3  55		   *	    push   ebp
 000000D4  8B EC	   *	    mov    ebp, esp
					 INVOKE ShowParams,8
 000000D6  6A 08	   *	    push   +000000008h
 000000D8  E8 00000085	   *	    call   ShowParams

 000000DD  8B 4D 0C		    mov ecx,aCount
 000000E0  8B 75 08			mov esi,aPtr
				    ;//mov eax,0                                                                ;//set the sum to zero

 000000E3			L1:                                                                            ;//being loop
 000000E3  E8 00000000 E	    call ReadInt
 000000E8  89 06		    mov [esi],eax
 000000EA  03 75 10		    add esi, aType
 000000ED  E2 F4		    loop L1                                                                    ;//repeat for array size

				 
					 ;//call cls
				  ;//INVOKE ShowParams,8
				    ret                                                                        ;//sum is in EAX
 000000EF  C9		   *	    leave  
 000000F0  C2 000C	   *	    ret    0000Ch

 000000F3			FillArray endp                                                               ;//end the PrintArray Procedure


 000000F3			CalcArray PROC, aCount:DWORD, aSize: DWORD, aType:Dword, aPtr: PTR DWORD															;//begin the PrintArray Procedure




 000000F3  55		   *	    push   ebp
 000000F4  8B EC	   *	    mov    ebp, esp
					INVOKE ShowParams,9
 000000F6  6A 09	   *	    push   +000000009h
 000000F8  E8 00000065	   *	    call   ShowParams

 000000FD  8B 75 14			mov esi, aPtr
 00000100  8B 4D 08			mov ecx,aCount
 00000103  83 E9 05			sub ecx,5
 00000106  8B 7D 14			mov edi, aPtr
 00000109  8B 55 0C			mov edx,aSize ;//need to change
					

 0000010C  B8 00000000			mov eax,0																;//set the sum to zero
 00000111			L1:	
 00000111  8B 06			mov eax,[esi]
 00000113  03 06			add eax,[esi]
 00000115  8B D8			mov ebx,eax
 00000117  03 46 14			add eax,[esi + (type esi * (lengthof intarray / 2))]
 0000011A  29 5E 14			sub [esi + (type esi * (lengthof intarray / 2))],ebx
 0000011D  89 06			mov[esi],eax	
					
 0000011F  03 75 10			add esi, aType 
 00000122  03 7D 10			add edi, aType 
					
 00000125  E2 EA			loop L1														
					

					ret																		;//sum is in EAX
 00000127  C9		   *	    leave  
 00000128  C2 0010	   *	    ret    00010h



 0000012B			CalcArray endp																;//end the PrintArray Procedure

				;//print array proc from previous lab
 0000012B			PrintArray PROC, aPtr: PTR DWORD, aCount:DWORD, aType:Dword                                                                ;//begin the PrintArray Procedure
					


 0000012B  55		   *	    push   ebp
 0000012C  8B EC	   *	    mov    ebp, esp
					INVOKE ShowParams,8
 0000012E  6A 08	   *	    push   +000000008h
 00000130  E8 0000002D	   *	    call   ShowParams

 00000135  BA 0000012B R		mov edx,offset endl                                                        ;//moves into edx register the first message string
 0000013A  E8 00000000 E	    call WriteString  

 0000013F  8B 4D 0C		    mov ecx,aCount
 00000142  8B 75 08			mov esi,aPtr
 00000145  8B 45 10			mov eax,aType                                                              ;//set the sum to zero

 00000148			L1:                                                                            ;//being loop
 00000148  8B 06		    mov eax,[esi]                                                            ;//mov each integer into eax
 0000014A  83 C6 04		    add esi, TYPE DWORD                                                         ;//point to next integer
 0000014D  E8 00000000 E	    call WriteInt                                                            ;//will write each individual element of the array to the screen
 00000152  BA 0000012B R	    mov edx,offset endl                                                        ;//moves into edx register the first message string
 00000157  E8 00000000 E	    call WriteString                                                        ;//moves the message to the console
 0000015C  E2 EA		    loop L1                                                                    ;//repeat for array size

				   
				    ret                                                                        ;//sum is in EAX
 0000015E  C9		   *	    leave  
 0000015F  C2 000C	   *	    ret    0000Ch

				   
 00000162			PrintArray endp                                                                ;//end the PrintArray Procedure

 00000162			ShowParams PROC	, numParam:DWORD														;//begin the PrintArray Procedure


 00000162  55		   *	    push   ebp
 00000163  8B EC	   *	    mov    ebp, esp
 00000165  60			pushad
 00000166  8B 74 24 08			mov esi,[esp + 8]
 0000016A  8B 4D 08			mov ecx,numParam

 0000016D			L1:
 0000016D  BA 0000012B R	     mov edx,offset endl                                ;//moves into edx register the endl message string
 00000172  E8 00000000 E	    call WriteString                                ;//moves the message to the console                       
 00000177  BA 0000011A R		mov edx,offset msg5                                ;//moves into edx register the endl message string
 0000017C  E8 00000000 E	    call WriteString                                ;//moves the message to the console
 00000181  8B C6			mov eax,esi
 00000183  E8 00000000 E		call WriteHex
 00000188  BA 00000124 R		mov edx,offset msg6                                ;//moves into edx register the endl message string
 0000018D  E8 00000000 E	    call WriteString                                ;//moves the message to the console
 00000192  8B 06			mov eax,[esi]
 00000194  E8 00000000 E		call WriteHex
 00000199  83 C6 04			add esi,TYPE IntArray
 0000019C  E2 CF			Loop L1



 0000019E  BA 0000012B R		mov edx,offset endl                                ;//moves into edx register the endl message string
 000001A3  E8 00000000 E	    call WriteString                                ;//moves the message to the console
 000001A8  BA 0000012B R		mov edx,offset endl                                ;//moves into edx register the endl message string
 000001AD  E8 00000000 E	    call WriteString                                ;//moves the message to the console

 000001B2  61			popad

					ret																		;//sum is in EAX
 000001B3  C9		   *	    leave  
 000001B4  C2 0004	   *	    ret    00004h



 000001B7			ShowParams endp																;//end the PrintArray Procedure


				end main
Microsoft (R) Macro Assembler Version 11.00.61030.0	    12/05/14 19:22:43
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000012E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001B7 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalcArray  . . . . . . . . . . .	P Near	 000000F3 _TEXT	Length= 00000038 Public STDCALL
  aCount . . . . . . . . . . . .	DWord	 bp + 00000008
  aSize  . . . . . . . . . . . .	DWord	 bp + 0000000C
  aType  . . . . . . . . . . . .	DWord	 bp + 00000010
  aPtr . . . . . . . . . . . . .	DWord	 bp + 00000014
  L1 . . . . . . . . . . . . . .	L Near	 00000111 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FillArray  . . . . . . . . . . .	P Near	 000000D3 _TEXT	Length= 00000020 Public STDCALL
  aPtr . . . . . . . . . . . . .	DWord	 bp + 00000008
  aCount . . . . . . . . . . . .	DWord	 bp + 0000000C
  aType  . . . . . . . . . . . .	DWord	 bp + 00000010
  L1 . . . . . . . . . . . . . .	L Near	 000000E3 _TEXT	
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintArray . . . . . . . . . . .	P Near	 0000012B _TEXT	Length= 00000037 Public STDCALL
  aPtr . . . . . . . . . . . . .	DWord	 bp + 00000008
  aCount . . . . . . . . . . . .	DWord	 bp + 0000000C
  aType  . . . . . . . . . . . .	DWord	 bp + 00000010
  L1 . . . . . . . . . . . . . .	L Near	 00000148 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowParams . . . . . . . . . . .	P Near	 00000162 _TEXT	Length= 00000055 Public STDCALL
  numParam . . . . . . . . . . .	DWord	 bp + 00000008
  L1 . . . . . . . . . . . . . .	L Near	 0000016D _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000D3 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
Calc . . . . . . . . . . . . . .	Byte	 000000D3 _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
Stk  . . . . . . . . . . . . . .	Byte	 000000E8 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dash . . . . . . . . . . . . . .	Byte	 000000FD _DATA	
endl . . . . . . . . . . . . . .	Byte	 0000012B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intArray . . . . . . . . . . . .	DWord	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
msg1 . . . . . . . . . . . . . .	Byte	 00000028 _DATA	
msg2 . . . . . . . . . . . . . .	Byte	 0000003C _DATA	
msg3 . . . . . . . . . . . . . .	Byte	 0000006C _DATA	
msg4 . . . . . . . . . . . . . .	Byte	 000000A3 _DATA	
msg5 . . . . . . . . . . . . . .	Byte	 0000011A _DATA	
msg6 . . . . . . . . . . . . . .	Byte	 00000124 _DATA	
msg7 . . . . . . . . . . . . . .	Byte	 00000128 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
