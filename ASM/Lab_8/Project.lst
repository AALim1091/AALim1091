Microsoft (R) Macro Assembler Version 11.00.61030.0	    10/20/14 23:16:02
main.asm						     Page 1 - 1


				;//Aaron Lim
				;//CSIS-118B-4179
				;//October 14, 2014
				;//Lab_8

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;//.386
				;//.model flat,stdcall
				;//.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data 		;//write your data in this section
					
 00000000 00000001		intArray DWORD 1,2,3,4,5
	   00000002
	   00000003
	   00000004
	   00000005
 00000014 00000000		task DWORD ?
 00000018 00000000		var1 DWORD ?
 0000001C 00000000		var2 DWORD ?


 00000020 2D 2D 2D 2D 20	msg1 BYTE "---- Boolean Calculator ---------- ", 0dh,0ah,0							;//string BYTE
	   42 6F 6F 6C 65
	   61 6E 20 43 61
	   6C 63 75 6C 61
	   74 6F 72 20 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 20
	   0D 0A 00
 00000046 31 2E 20 78 20	msg2 BYTE "1. x AND y ", 0dh,0													;//string BYTE
	   41 4E 44 20 79
	   20 0D 00
 00000053 32 2E 20 78 20	msg3 BYTE "2. x OR y ", 0dh,0													;//string BYTE
	   4F 52 20 79 20
	   0D 00
 0000005F 33 2E 20 4E 6F	msg4 BYTE "3. Not x ", 0dh,0	
	   74 20 78 20 0D
	   00
 0000006A 34 2E 20 78 20	msg5 BYTE "4. x XOR y ",0dh,0													;//string BYTE
	   58 4F 52 20 79
	   20 0D 00
 00000077 35 2E 20 45 78	msg6 BYTE "5. Exit program ", 0dh,0ah,0												;//string BYTE
	   69 74 20 70 72
	   6F 67 72 61 6D
	   20 0D 0A 00
 0000008A 43 68 6F 6F 73	msg7 BYTE "Choose an operation by entering an integer from 1 to 5> ",0dh,0ah,0		;//string BYTE
	   65 20 61 6E 20
	   6F 70 65 72 61
	   74 69 6F 6E 20
	   62 79 20 65 6E
	   74 65 72 69 6E
	   67 20 61 6E 20
	   69 6E 74 65 67
	   65 72 20 66 72
	   6F 6D 20 31 20
	   74 6F 20 35 3E
	   20 0D 0A 00
 000000C5 42 6F 6F 6C 65	msgAND BYTE "Boolean AND ", 0dh,0													;//string BYTE
	   61 6E 20 41 4E
	   44 20 0D 00
 000000D3 42 6F 6F 6C 65	msgOR BYTE "Boolean OR ", 0dh,0													;//string BYTE
	   61 6E 20 4F 52
	   20 0D 00
 000000E0 42 6F 6F 6C 65	msgNOT BYTE "Boolean NOT ", 0dh,0	
	   61 6E 20 4E 4F
	   54 20 0D 00
 000000EE 42 6F 6F 6C 65	msgXOR BYTE "Boolean XOR ",0dh,0													;//string BYTE
	   61 6E 20 58 4F
	   52 20 0D 00

 000000FC 49 6E 70 75 74	first BYTE "Input the first 32-bit hexadecimal operand: ",0		;//string BYTE
	   20 74 68 65 20
	   66 69 72 73 74
	   20 33 32 2D 62
	   69 74 20 68 65
	   78 61 64 65 63
	   69 6D 61 6C 20
	   6F 70 65 72 61
	   6E 64 3A 20 00
 00000129 49 6E 70 75 74	second BYTE "Input the second 32-bit hexadecimal operand: ",0	;//string BYTE
	   20 74 68 65 20
	   73 65 63 6F 6E
	   64 20 33 32 2D
	   62 69 74 20 68
	   65 78 61 64 65
	   63 69 6D 61 6C
	   20 6F 70 65 72
	   61 6E 64 3A 20
	   00
 00000157 54 68 65 20 33	result BYTE "The 32-bit hexadecimal result is: ",0
	   32 2D 62 69 74
	   20 68 65 78 61
	   64 65 63 69 6D
	   61 6C 20 72 65
	   73 75 6C 74 20
	   69 73 3A 20 00

 0000017A 2C 20 0D 0A 00	comma BYTE ", ",0dh,0ah,0															;//comma string
 0000017F 0D 0A 00		endl BYTE 0dh,0ah,0																	;//endl string
 00000182 09			tabr BYTE 9h																		;//tab string

 00000000			.code  		;//write your program here
 00000000			main proc
					
 00000000  BA 00000020 R		mov edx,offset msg1																		;//moves into edx register the msg1 message string
 00000005  E8 00000000 E		call WriteString																		;//moves the message to the console
 0000000A  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 0000000F  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000014  BA 00000046 R		mov edx,offset msg2																		;//moves into edx register the msg1 message string
 00000019  E8 00000000 E		call WriteString																		;//moves the message to the console
 0000001E  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 00000023  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000028  BA 00000053 R		mov edx,offset msg3																		;//moves into edx register the msg1 message string
 0000002D  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000032  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 00000037  E8 00000000 E		call WriteString																		;//moves the message to the console
 0000003C  BA 0000005F R		mov edx,offset msg4																		;//moves into edx register the msg1 message string
 00000041  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000046  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 0000004B  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000050  BA 0000006A R		mov edx,offset msg5																		;//moves into edx register the msg1 message string
 00000055  E8 00000000 E		call WriteString																		;//moves the message to the console
 0000005A  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 0000005F  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000064  BA 00000077 R		mov edx,offset msg6																		;//moves into edx register the msg1 message string
 00000069  E8 00000000 E		call WriteString																		;//moves the message to the console
 0000006E  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 00000073  E8 00000000 E		call WriteString																		;//moves the message to the console
					
 00000078  E8 00000000			call Choice ;//call choice proc

 0000007D			main endp

 0000007D			Choice PROC ;//begin choice proc

 0000007D  BA 0000008A R		mov edx,offset msg7																		;//moves into edx register the msg1 message string
 00000082  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000087  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 0000008C  E8 00000000 E		call WriteString																		;//moves the message to the console
					
 00000091  E8 00000000 E		call ReadHex ;//asks user for input
 00000096  A3 00000014 R		mov task,eax ;//moves user input to task variable
 0000009B  A1 00000014 R		mov eax,task ;//moves value in task to eax register
					
					;//mov ebx,OFFSET intArray
					;//mov ecx,LENGTHOF intarray
 000000A0  50			push eax ;//push eax onto the stack
 000000A1			L1: ;//loop 1 task
 000000A1  83 F8 01			cmp eax,1 ;//compares value from user to the number 1
 000000A4  74 18			je Andop ;//if equal jumps to Andop label
 000000A6  83 F8 02			cmp eax,2 ;//compares value from user to the number 2
 000000A9  74 1A			je Orop ;//if equal jumps to Orop label
 000000AB  83 F8 03			cmp eax,3 ;//compares value from user to the number 3
 000000AE  74 1C			je Notop ;//if equal jumps to Notop label
 000000B0  83 F8 04			cmp eax,4 ;//compares value from user to the number 4
 000000B3  74 1E			je Xorop ;//if equal jumps to Xorop label
 000000B5  83 F8 05			cmp eax,5 ;//compares value from user to the number 5
 000000B8  0F 84 0000019E		je Exitt ;//if equal jumps to Exitt label

 000000BE			Andop: ;//label
 000000BE  E8 00000023			call Andd ;//calls andd proc
 000000C3  EB 15			jmp back ;//jumps to back label
 000000C5			Orop: ;//label
 000000C5  E8 0000006A			call Orr ;//calls Orr proc
 000000CA  EB 0E			jmp back ;//jumps to back label
 000000CC			Notop: ;//label
 000000CC  E8 000000B1			call Nott ;//calls Nott proc
 000000D1  EB 07			jmp back ;//jumps to back label
 000000D3			Xorop: ;//label
 000000D3  E8 000000F3			call Xorr ;//calls Xorr proc
 000000D8  EB 00			jmp back ;//jumps to back label
 000000DA			back: ;//label
 000000DA  E8 FFFFFF21			call main ;//jumps back to main proc
 000000DF			Exitop: ;//label
 000000DF  E8 00000178			call Exitt ;//calls Exitt proc

 000000E4  58			pop eax ;//pop eax from the stack
 000000E5  C3				ret ;//return value

 000000E6			Choice endp ;//end choice proc



 000000E6			Andd PROC


 000000E6  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 000000EB  E8 00000000 E		call WriteString																		;//moves the message to the console
 000000F0  BA 000000C5 R		mov edx,offset msgAND																	;//moves into edx register the msg1 message string
 000000F5  E8 00000000 E		call WriteString																		;//moves the message to the console
 000000FA  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 000000FF  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000104  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 00000109  E8 00000000 E		call WriteString																		;//moves the message to the console

 0000010E  E8 00000106			call Input ;//call proc for user input

 00000113  BA 00000157 R		mov edx,offset result																		;//moves into edx register the msg1 message string
 00000118  E8 00000000 E		call WriteString																		;//moves the message to the console
 0000011D  B8 00000000			mov eax,0
 00000122  03 05 00000018 R		add eax,var1
 00000128  23 05 0000001C R		AND eax,var2
 0000012E  E8 0000010F			call finalval																		;//moves the message to the console
					


 00000133  C3			ret ;//return value
 00000134			Andd endp

 00000134			Orr PROC

 00000134  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 00000139  E8 00000000 E		call WriteString																		;//moves the message to the console
 0000013E  BA 000000D3 R		mov edx,offset msgOR																	;//moves into edx register the msg1 message string
 00000143  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000148  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 0000014D  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000152  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 00000157  E8 00000000 E		call WriteString																		;//moves the message to the console

 0000015C  E8 000000B8			call Input ;//call proc for user input

 00000161  BA 00000157 R		mov edx,offset result																		;//moves into edx register the msg1 message string
 00000166  E8 00000000 E		call WriteString																		;//moves the message to the console
 0000016B  B8 00000000			mov eax,0
 00000170  03 05 00000018 R		add eax,var1
 00000176  0B 05 0000001C R		OR eax,var2
 0000017C  E8 000000C1			call finalval																		;//moves the message to the console
 00000181  C3			ret ;//return value
 00000182			Orr endp

 00000182			Nott PROC

 00000182  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 00000187  E8 00000000 E		call WriteString																		;//moves the message to the console
 0000018C  BA 000000E0 R		mov edx,offset msgNOT																		;//moves into edx register the msg1 message string
 00000191  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000196  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 0000019B  E8 00000000 E		call WriteString																		;//moves the message to the console
 000001A0  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 000001A5  E8 00000000 E		call WriteString																		;//moves the message to the console

 000001AA  BA 000000FC R		mov edx,offset first																		;//moves into edx register the msg1 message string
 000001AF  E8 00000000 E		call WriteString																		;//moves the message to the console
 000001B4  E8 00000000 E		call ReadHex
 000001B9  BA 00000157 R		mov edx,offset result																		;//moves into edx register the msg1 message string
 000001BE  E8 00000000 E		call WriteString																		;//moves the message to the console
 000001C3  F7 D0			NOT eax
 000001C5  E8 00000078			call finalval																		;//moves the message to the console

 000001CA  C3			ret ;//return value
 000001CB			Nott endp

 000001CB			Xorr PROC

 000001CB  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 000001D0  E8 00000000 E		call WriteString																		;//moves the message to the console
 000001D5  BA 000000EE R		mov edx,offset msgXOR																		;//moves into edx register the msg1 message string
 000001DA  E8 00000000 E		call WriteString																		;//moves the message to the console
 000001DF  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 000001E4  E8 00000000 E		call WriteString																		;//moves the message to the console
 000001E9  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 000001EE  E8 00000000 E		call WriteString																		;//moves the message to the console

 000001F3  E8 00000021			call Input ;//call proc for user input

 000001F8  BA 00000157 R		mov edx,offset result																		;//moves into edx register the msg1 message string
 000001FD  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000202  B8 00000000			mov eax,0
 00000207  03 05 00000018 R		add eax,var1
 0000020D  33 05 0000001C R		XOR eax,var2
 00000213  E8 0000002A			call finalval																	;//moves the message to the console

 00000218  C3			ret ;//return value
 00000219			Xorr endp

 00000219			Input PROC

 00000219  BA 000000FC R		mov edx,offset first																		;//moves into edx register the msg1 message string
 0000021E  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000223  E8 00000000 E		call ReadHex
 00000228  A3 00000018 R		mov var1,eax


 0000022D  BA 00000129 R		mov edx,offset second																		;//moves into edx register the msg1 message string
 00000232  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000237  E8 00000000 E		call ReadHex
 0000023C  A3 0000001C R		mov var2,eax

 00000241  C3			ret ;//return value
 00000242			Input endp

 00000242			finalval PROC ;//beginf final vall proc

 00000242  E8 00000000 E		call WriteHex
 00000247  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 0000024C  E8 00000000 E		call WriteString																		;//moves the message to the console
 00000251  BA 0000017F R		mov edx,offset endl																		;//moves into edx register the endl message string
 00000256  E8 00000000 E		call WriteString																		;//moves the message to the console

 0000025B  C3			ret ;//return value
 0000025C			finalval endp ;//end final val proc

 0000025C			Exitt PROC ;//exit program proc

 0000025C  E8 00000000 E	call crlf
				exit
 00000261  6A 00	   *	    push   +000000000h
 00000263  E8 00000000 E   *	    call   ExitProcess
 00000268  C3			ret ;//return value

 00000269			Exitt endp ;//end of exit program proc


				end main
Microsoft (R) Macro Assembler Version 11.00.61030.0	    10/20/14 23:16:02
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000183 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000269 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Andd . . . . . . . . . . . . . .	P Near	 000000E6 _TEXT	Length= 0000004E Public STDCALL
Choice . . . . . . . . . . . . .	P Near	 0000007D _TEXT	Length= 00000069 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000A1 _TEXT	
  Andop  . . . . . . . . . . . .	L Near	 000000BE _TEXT	
  Orop . . . . . . . . . . . . .	L Near	 000000C5 _TEXT	
  Notop  . . . . . . . . . . . .	L Near	 000000CC _TEXT	
  Xorop  . . . . . . . . . . . .	L Near	 000000D3 _TEXT	
  back . . . . . . . . . . . . .	L Near	 000000DA _TEXT	
  Exitop . . . . . . . . . . . .	L Near	 000000DF _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Exitt  . . . . . . . . . . . . .	P Near	 0000025C _TEXT	Length= 0000000D Public STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Input  . . . . . . . . . . . . .	P Near	 00000219 _TEXT	Length= 00000029 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Nott . . . . . . . . . . . . . .	P Near	 00000182 _TEXT	Length= 00000049 Public STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Orr  . . . . . . . . . . . . . .	P Near	 00000134 _TEXT	Length= 0000004E Public STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Xorr . . . . . . . . . . . . . .	P Near	 000001CB _TEXT	Length= 0000004E Public STDCALL
finalval . . . . . . . . . . . .	P Near	 00000242 _TEXT	Length= 0000001A Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000007D Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma  . . . . . . . . . . . . .	Byte	 0000017A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
endl . . . . . . . . . . . . . .	Byte	 0000017F _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
first  . . . . . . . . . . . . .	Byte	 000000FC _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intArray . . . . . . . . . . . .	DWord	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
msg1 . . . . . . . . . . . . . .	Byte	 00000020 _DATA	
msg2 . . . . . . . . . . . . . .	Byte	 00000046 _DATA	
msg3 . . . . . . . . . . . . . .	Byte	 00000053 _DATA	
msg4 . . . . . . . . . . . . . .	Byte	 0000005F _DATA	
msg5 . . . . . . . . . . . . . .	Byte	 0000006A _DATA	
msg6 . . . . . . . . . . . . . .	Byte	 00000077 _DATA	
msg7 . . . . . . . . . . . . . .	Byte	 0000008A _DATA	
msgAND . . . . . . . . . . . . .	Byte	 000000C5 _DATA	
msgNOT . . . . . . . . . . . . .	Byte	 000000E0 _DATA	
msgOR  . . . . . . . . . . . . .	Byte	 000000D3 _DATA	
msgXOR . . . . . . . . . . . . .	Byte	 000000EE _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
result . . . . . . . . . . . . .	Byte	 00000157 _DATA	
second . . . . . . . . . . . . .	Byte	 00000129 _DATA	
tabr . . . . . . . . . . . . . .	Byte	 00000182 _DATA	
task . . . . . . . . . . . . . .	DWord	 00000014 _DATA	
var1 . . . . . . . . . . . . . .	DWord	 00000018 _DATA	
var2 . . . . . . . . . . . . . .	DWord	 0000001C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
